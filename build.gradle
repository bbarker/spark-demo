buildscript {
    ext.kotlin_version = '0.12.613'
    repositories {
        mavenCentral()
        maven {
            url 'http://oss.sonatype.org/content/repositories/snapshots'
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        //How to use this instead:
        //classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
    }
}


apply from: "$rootDir/gradle/repositories.gradle"
apply from: "$rootDir/gradle/dependencies.gradle"
apply from: "$rootDir/gradle/artifacts.gradle"
apply from: "$rootDir/gradle/avro.gradle"
apply plugin: "idea"
apply plugin: "eclipse"

repositories {
    maven { url repos.cloudera }
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile([
        libs.avro,
        libs.parquetAvro,
        libs.commonsIO,
        libs.commonsLang,
        libs.guava,
        libs.kotlin,
        libs.slf4jLog4j,
        libs.log4j,
        libs.scalaWebSockets,
        libs.kafkaTest,
        libs.curatorTest
    ])

    providedCompile([
        libs.spark,
        libs.sparkMlLib,
        libs.sparkGraphX,
        libs.sparkStreaming,
        libs.sparkStreamingKafka
    ])

    testCompile([
        libs.testNG
    ])
}

// Configure Testing
test {
    useTestNG()
    maxParallelForks = 8
}

// Gradle Wrapper Settings
task wrapper(type: Wrapper) {
    gradleVersion = "2.4"
}

hadoopJar.onlyIf { !project.hasProperty('skipHadoopJar') }

task runSpark(dependsOn: 'hadoopJar', type: JavaExec) {
    classpath = files(hadoopJar.archivePath, configurations.providedCompile)
    maxHeapSize = "2048m"

    // Set main class
    if (project.hasProperty('sparkMain')) {
        main = sparkMain
    }
    // Set args
    if (project.hasProperty('sparkArgs')) {
        args(sparkArgs.split(' '))
    }
}
